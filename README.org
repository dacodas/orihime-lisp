(todo :status :cancelled
      :timestamp (date "2018-06-06 Wed 00:02")
      :tagline 始>終>Ignore the /l-ol comments in definitions終
      始>終>An example of thse is the definition for 長い終)

(todo :status :closed
      :tagline 始>終>Are parent and child words working right now?終
      :timestamp (date "2018-06-06 Wed 00:02"))

(todo :tagline 始>終>Sentence->word relationship isn't working終
      :timestamp (date "2018-06-06 Wed 00:02")
      始>終>I think this is the same issue as before with the friggin shizz終)

(todo :status :cancelled
      :tagline 始>終>Get linedit working終
      始>終>What was this for again, now?終)

(todo :status :cancelled
      :tagline 始>終>How to relate sentence with words? 終
      始>終>Should I implement this in both elisp and common lisp? 終)

(todo :tagline 始>終>Anki card layout終
      (section :title 始>終>What I want to see for the flashcard終
               始>終>Front
               1. The sentence
               2. The main word highlighted in red and bolded
               3. Other words bolded

               Back
               1. Main word definition first, definition expanded
               2. Other definitions following, definitions expandable終)
      (section :title 始>終>What the note must look like終
               始>終>- The sentence
               - The words, separated by some important separator
               
               When the card is being generated, it can use some function like under
               the media.py's "string manipulation" function to grab info from a
               Mongo or SQL database for the definition and what to show :D 

               It can even query a running Lisp to generate the content :D終
               (section :title 始>終>A curious thought終
                        始>終>In fact, I think the Anki card can just include some ID of the
                        sentence and the IDs of the words. 

                        The most difficult thing to overcome with this approach is, how can I
                        edit the contents of the sentence and make sure to keep the notes
                        correlated between the Lispy database and the Anki database.

                        I can definitely open the sentence contents in an Emacs buffer, but
                        then I have to somehow persist the changes back to Anki. 

                        I think the best thing would be to have a simple Python wrapper that
                        can instantiate notes and add them very quickly to the collection. 

                        So, for example
                        - Button in Anki says "Edit goo sentence"
                        - Anki sends the current sentence md5sum, this also implies the words
                        that are connected to it
                        - SBCL starts up an emacs buffer with that sentence and allows for the
                        sentence, accompanying words to be modified 
                        - When the user indicates he is done, SBCL sends back the old md5sum
                        and the new md5sum
                        - Python loads the old note, replaces the sentence field with the new
                        md5sum, replaces the word fields with whatever words are now related
                        to it

                        #+BEGIN_SRC python

                        # Lisp sends old_md5sum, new_md5sum
                        
                        collection = Collection("/home/dacoda/.local/share/Anki2/User 1/collection.anki2")
                        id = grab_note_id(old_md5sum)
                        note = Note(collection.col, id=id)
                        
                        # It looks like fields[0] is a checksum of all the fields
                        old_fields = note.fields 
                        note.fields[1:] = []

                        words = get_sentence_words_from_lisp(new_md5sum)
                        note.fields.append(words)
                        note.flush()
                        #+END_SRC終)))

(todo :tagline 始>終>Adding sentence and then changing it later終 
      始>終>Should a change to the buffer just go through the whole structure of
      words and update them? I guess since there is only a sentence->word
      connection, that might suffice, eh?終)

(todo :tagline 始>終>Make a mode for looking at *goo-word-* buffers終
      (todo :tagline 始>終>Handle cases with ㋐㋑㋒㋓㋔ in the definitions終
            始>終>There are two ways of solving this, I think:

            1. Parse the dictionary entries into Lispy data structures
            2. Allow the *goo-word-* mode to treat lines starting with ㋐㋑
            etc. in the same way org-mode treats lines starting with hyphens
            and numbers終))

(todo :tagline 始>終>Create stack based approach to looking up words終)
(todo :tagline 始>終>Create network of words after stack based session終)
(todo :tagline 始>終>I'm mixing up the WORD key and it's representation in memory終)
(todo :tagline 始>終>Use scribble (or something similar) documentation for終)


